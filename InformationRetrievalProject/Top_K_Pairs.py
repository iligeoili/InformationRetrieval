import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np


greek_stop_words = [
    'και', 'στο', 'στη', 'με', 'για', 'αλλά', 'ή', 'σαν', 'είναι',
    'στην', 'στα', 'την', 'του', 'το', 'της', 'των', 'τον', 'που',
    'τον', 'την', 'το', 'τα', 'τους', 'τις', 'μια', 'μία', 'ένα', 'ένας',
    'μετά', 'πριν', 'πάνω', 'μέσα', 'κάτω', 'από', 'πάνω', 'όπως',
    'ότι', 'όταν', 'επειδή', 'εάν', 'αφού', 'προτού', 'ενώ', 'αν',
    'ήταν', 'έχει', 'είχε', 'είχαν', 'έχουν', 'έχω', 'έχετε', 'είμαι',
    'είσαι', 'είναι', 'είμαστε', 'είστε', 'στον', 'να', 'δε', 'δεν',
    'μη', 'μην', 'είτε', 'ούτε', 'αλλιώς', 'παρά', 'έτσι', 'όσο', 'σας', 'μου',
    'μας', 'σε', 'τι', 'οι', 'αυτά', 'ως', 'τι', 'τη', 'στις', 'αυτό', 'αυτή', 'θα', 'εμείς', 'οποία',
    'όμως', 'οποίο', 'πολύ', 'δηλαδή', 'κυρίες', 'κύριε', 'κατά', 'λοιπόν', 'κύριοι', 'αυτήν',
    'διότι', 'γιατί', 'προς', 'πω', 'κάθε', 'πιο', 'γι', '000',
    'εδώ', 'αυτές', 'εκεί', 'στους', 'οποίες', 'οποίοι', 'υπό', 'επί', 'όλα', 'όλοι',
    'εις', 'όσον', 'περί', 'πώς', 'ώστε', 'ήδη', 'διά', 'πα', 'σο', 'αρα', 'παρά', 'εγώ', 'μόνο',
    'όπου', 'τόσο', 'πάρα', 'δύο', 'πως', 'τότε', 'μα', 'κι', 'δισ', 'δις', 'αυτοί', 'εσείς', 'μέχρι', 'λόγω',
    'πρέπει', 'μπορούμε', 'μπορεί', 'έχουμε', 'έχει', 'υπάρχει',
    'πρόκειται', 'λόγος', 'περίπτωση', 'μέρος', 'πρόβλημα',
    'επίσης', 'όπως', 'διότι', 'οπότε', 'επομένως', 'παρόλα',
    'όμως', 'παρότι', 'διαφορετικά', 'ακόμα', 'αυτή', 'αυτό',
    'αυτούς', 'αυτών', 'εκείνοι', 'εκείνων', 'εκείνη', 'εκείνο',
    'τέτοια', 'τέτοιο', 'τέτοιος', 'τέτοιων', 'σήμερα', 'χθες',
    'αύριο', 'προχθές', 'εδώ', 'εκεί', 'πουθενά', 'παντού', 'αλλού',
    'πάντα', 'ποτέ', 'συχνά', 'σπάνια', 'πρόσφατα', 'παλιά',
    'νωρίς', 'αργά', 'γρήγορα', 'αργά', 'καλά', 'κακά', 'καλύτερα',
    'χειρότερα', 'μεγάλο', 'μικρό', 'μεγαλύτερο', 'μικρότερο' ,
    'πλειοψηφία', 'δεκτό', 'άρθρο', 'ερωτάται', 'συνεπώς', 'έγινε',
    'γίνεται', 'σώμα', 'τροποποιήθηκε', 'κύριο', 'ναι', 'λόγο', 'πρόεδρε',
    'παρακαλώ', 'υπουργέ', 'όχι', 'ορίστε', 'κυρία', 'υπουργός', 'κύριος',
    'ευχαριστούμε', 'μάλιστα', 'πρέπει', 'υπάρχει', 'σήμερα', 'μπορεί',
    'συνάδελφε', 'διακόπτετε', 'συνάδελφοι', 'τελειώνετε', 'συνεχίστε',
    'ησυχία', 'παρών', 'υφυπουργός', 'ήθελα', 'μπορώ', 'επιτρέπετε', 'λεπτό',
    'προσωπικού', 'θέλω', 'ευχαριστώ', 'τρία', 'πέντε', 'δέκα', 'οκτώ', 'επτά', 'έξι' ,
    'λεπτά', 'τώρα', 'θέμα', 'κυβέρνηση', 'νομοσχέδιο', 'υπουργό',
    'συζήτηση', 'αφορά', 'γίνει', 'πολιτική', 'ολοκληρώστε', 'υφυπουργέ',
    'λαφαζάνη', 'δευτερολογία', 'χρόνο', 'σκέψη', 'καλοσύνη', 'χρόνος',
    'γεωργιάδη', 'κοινοβουλευτικός', 'εκπρόσωπος', 'δευτερολογήσει',
    'βουλευτής', 'δεκαπέντε', 'δώσω', 'τμήμα', 'δεκτή', 'αριθμό',
    'ερώτηση', 'επίκαιρη', '10', '11', 'γενικό', 'ειδικό',
    'εντάσσεται', 'ίδιο', 'τροπολογίας', 'τροπολογίες'

]

# Φόρτωση των δεδομένων
df = pd.read_csv('Greek_Parliament_Proceedings_1989_2020.csv')

# Ομαδοποίηση των ομιλιών ανά βουλευτή
grouped = df.groupby('member_name')['speech'].apply(' '.join)

# Εξαγωγή διανυσμάτων χαρακτηριστικών με TF-IDF
tfidf = TfidfVectorizer(stop_words=greek_stop_words)
tfidf_matrix = tfidf.fit_transform(grouped)


# Υπολογισμός ομοιότητας κοσινουσίου
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Μετατροπή του πίνακα ομοιότητας σε DataFrame
similarity_df = pd.DataFrame(cosine_sim, index=grouped.index, columns=grouped.index)

# Εύρεση των top-k ζευγών με τον υψηλότερο βαθμό ομοιότητας
k = 5  # Θέστε το k σύμφωνα με την επιθυμία σας
top_pairs = {}

for i in similarity_df.columns:
    # Ταξινόμηση των ομοιοτήτων σε φθίνουσα σειρά και αγνόηση της πρώτης τιμής (ομοιότητα με τον εαυτό του)
    sorted_indices = np.argsort(similarity_df[i])[::-1][1:]
    sorted_values = similarity_df[i][sorted_indices]

    # Εύρεση των top-k ζευγών
    top_pairs[i] = [(grouped.index[j], sorted_values[j]) for j in sorted_indices[:k]]

# Εμφάνιση των top-k ζευγών
for member, pairs in top_pairs.items():
    print(f"Top-k Similar Pairs for {member}:")
    for pair in pairs:
        print(f"{pair[0]} with similarity {pair[1]:.4f}")
    print("\n")

